#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
try:
	reload(sys)
	sys.setdefaultencoding('utf8')
except:
	pass

import curses, time, os

home=""
try:
	from pathlib import Path
	home=str(Path.home())
except:
	from os.path import expanduser
	home=expanduser("~")
ferndir=home+"/.fern/"

from datetime import datetime
import traceback

import re

import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
code = locale.getpreferredencoding()
code="UTF-8"

import codecs

UTF8Writer = codecs.getwriter('utf8')
sys.stdout = UTF8Writer(sys.stdout)

try:
	from html import unescape
except:
	try:
		from HTMLParser import HTMLParser
		unescape=HTMLParser().unescape
	except:
		from html.parser import HTMLParser
		unescape=HTMLParser().unescape


from mastodon import Mastodon

global scr, ROWS, COLS, seen_toots

ROWS=25
COLS=80

seen_toots=[]

hlcolor=[curses.COLOR_MAGENTA, curses.COLOR_BLACK]
normcolor=[curses.COLOR_WHITE, curses.COLOR_BLACK]
cwcolor=[curses.COLOR_RED, curses.COLOR_BLACK]
textcolor=[curses.COLOR_WHITE, curses.COLOR_BLACK]
menucolor=[curses.COLOR_GREEN, curses.COLOR_BLACK]
seencolor=[curses.COLOR_BLUE, curses.COLOR_BLACK]

hlnum=1
normnum=2
cwnum=3
textnum=4
menunum=5
seennum=6

def statusMsg(msg):
	query=curses.newwin(4, 80, 10, 0)
	query.box()
	query.addstr(1, 1, msg)
	query.overlay(scr)
	scr.refresh()
	query.refresh()
	query.getch()
	del query

def queryForInput(msg, hideEcho=False):
	query=curses.newwin(4, 80, 10, 0)
	query.box()
	query.addstr(1, 1, msg)
	query.overlay(scr)
	scr.refresh()
	query.refresh()
	if not hideEcho:
		curses.echo()
	curses.curs_set(1)
	addy=query.getstr(2, 1)
	curses.curs_set(0)
	curses.noecho()
	del query
	scr.refresh()
	return addy

def registerApplication(instanceURL, email, password):
	clientCredFname=ferndir+"clientcred.txt"
	userCredFname=ferndir+"usercred.txt"
	
	if not (os.path.exists(clientCredFname)):
		Mastodon.create_app("fern", to_file=clientCredFname, api_base_url=instanceURL)
	
	mastodon = Mastodon(client_id=clientCredFname, api_base_url=instanceURL)
	mastodon.log_in(email, password, to_file=userCredFname)
	with open(ferndir+"instance_url.txt", "w") as f:
		f.write(instanceURL)

def registerApplicationHelper():	
	statusMsg("You need to set up Fern to talk to your instance. Press any key to continue.")
	instanceURL=queryForInput("What is the URL of your instance?")
	email=queryForInput("What is your email?")
	password=queryForInput("What is your password?", True)
	try:
		registerApplication(instanceURL, email, password)
	except Exception as e:
		statusMsg("Something went wrong: "+str(e))
		raise e

def setupColor():
	curses.start_color()
	curses.init_pair(*([hlnum]+hlcolor))	 # Highlighted message frame
	curses.init_pair(*([normnum]+normcolor))	 # Normal message frame
	curses.init_pair(*([cwnum]+cwcolor))	 # CW text
	curses.init_pair(*([textnum]+textcolor))	 # Normal text
	curses.init_pair(*([menunum]+menucolor))	 # Menu
	curses.init_pair(*([seennum]+seencolor))	 # Already-seen messages

def setupCurses():
	global scr, ROWS, COLS
	scr = curses.initscr()
	setupColor()
	curses.cbreak()
	curses.noecho()
	scr.keypad(1)
	ROWS, COLS = scr.getmaxyx()
	scr.clear()
def teardownCurses():
	curses.nocbreak()
	scr.keypad(0)
	curses.echo()
	curses.endwin()

def trunc(string, length, affix="...", breakOnWord=False):
	if not string:
		return ""
	if len(string)<length:
		return string
	if length==0:
		return ""
	if len(affix)>length:
		return string[:length]
	if breakOnWord:
		words=string.split()
		for i in range(len(words), 1, -1):
			x=" ".join(words[:i]+[affix])
			if len(x)<length:
				return x
		return trunc(string, length, affix)
	else:
		return string[:length-len(affix)]+affix

def truncWrap(string, length, affix="\n", breakOnWord=True):
	ret=[]
	while len(string)>length:
		ret.append(trunc(string, length, affix, breakOnWord))
		string=string[len(ret[-1])-(1+len(affix)):]
	return ret+[string]
def truncWrapMulti(strings, length):
	ret=[]
	for string in strings:
		ret.extend(truncWrap(string, length))
		ret.extend("")
	return ret
def firstNonBlankLine(string):
	lines=string.split("\n")
	for line in lines:
		if len(line)>0:
			return line
def centerPad(string, length, padding=" "):
	string=trunc(string, length, breakOnWord=True)
	pad=length-len(string)
	if pad>0 and (pad/2)>0 and ((pad/2)/len(padding))>0:
		padstr=padding*((pad/2)/len(padding))
		return padstr+string+padstr
	return string

def drawPanels(uid, rows, cols, highlighted=0):
	hlColor=curses.color_pair(hlnum)
	color=curses.color_pair(normnum)
	leftPanelCols=int((cols/8.0)*3)
	rightPanelCols=cols-leftPanelCols
	truncID=trunc(uid, leftPanelCols-3)
	scr.addstr("".join(["+[", truncID, "]", "-"*(leftPanelCols-(3+len(truncID))), "+", "-"*(rightPanelCols-1)]))
	for i in range(0, (rows-3)/4):
		if highlighted==i:
			scr.addstr("".join(["#", " "*(leftPanelCols-1), " "*(rightPanelCols)]), hlColor)
			scr.addstr("".join(["#", " "*(leftPanelCols-1), " "*(rightPanelCols)]), hlColor)
			scr.addstr("".join(["#", " "*(leftPanelCols-1), " "*(rightPanelCols)]), hlColor)
			scr.addstr("".join(["#", "="*(leftPanelCols-1), " "*(rightPanelCols)]), hlColor)
		else:
			scr.addstr("".join(["|", " "*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), color)
			scr.addstr("".join(["|", " "*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), color)
			scr.addstr("".join(["|", " "*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), color)
			scr.addstr("".join(["+", "_"*(leftPanelCols-1), "/", " "*(rightPanelCols-1)]), color)
	if (rows-3)%4>0:
		for i in range(4*((rows-3)/4), rows-3):
			scr.addstr(" "*cols)
	scr.addstr(centerPad("[(p)rev/(n)ext_unread] [(P)rev/(N)ext_message] [(j)ump to timeline] [(T)op] [(c)ompose] [(q)uit]", cols).replace("_", " "), curses.color_pair(menunum))
	scr.addstr(centerPad("[(b)oost] [(f)av] [(s)ettings] [(o)pen_CW] [(t)hread_view] [(F)etch_new] [(h)elp]", cols).replace("_", " "), curses.color_pair(menunum))

def drawMsgPanel(idx, user, cw, msg, date, seen=False):
	panelstart=(idx*4)+1
	if panelstart+4 > ROWS-2:
		return
	panelwidth=int((COLS/8.0)*3)-1
	mcol=curses.color_pair(menunum)
	tcol=curses.color_pair(textnum)
	if(seen):
		mcol=curses.color_pair(seennum)
		tcol=curses.color_pair(seennum)
	scr.addstr(panelstart, 1, trunc(user, panelwidth), mcol)
	if not cw:
		scr.addstr(panelstart+1, 2, trunc(firstNonBlankLine(msg), panelwidth-2), tcol)
	else:
		scr.addstr(panelstart+1, 2, trunc(cw, panelwidth-2), curses.color_pair(cwnum))
	scr.addstr(panelstart+2, 2, trunc(date, panelwidth-2), mcol)
def drawSelectedMsg(user, displayname, cw, msg, cwopen=False):
	panelstart=int((COLS/8.0)*3)+3
	panelwidth=COLS-panelstart-1
	msg=truncWrapMulti(msg.split("\n"), panelwidth)
	scr.addstr(1, panelstart, trunc(displayname, panelwidth), curses.color_pair(menunum))
	scr.addstr(2, panelstart, "("+trunc(user, panelwidth-2)+")", curses.color_pair(menunum))
	if not cw:
		i=3
		for line in msg:
			if i>ROWS:
				return
			scr.addstr(i, panelstart, line, curses.color_pair(textnum))
			i+=1
	else:
		i=3
		for line in truncWrap("CW: "+cw, panelwidth):
			if i>ROWS:
				return
			scr.addstr(i, panelstart, line, curses.color_pair(cwnum))
			i+=1
		if cwopen:
			for line in msg:
				if i>ROWS:
					return
				scr.addstr(i, panelstart, line, curses.color_pair(textnum))
				i+=1

def processContents(string):
	string=string.replace("<p>", "\n").replace("</p>", "\n")
	string=re.sub("<[^>]*>", "", string)
	string=unescape(string)
	return string
def fillInDomain(name):
	if name.find("@")<0:
		return name+"@"+domain
	return name
def drawPanelContents(tl, selectedIdx, skipSeen=False):	
	scr.clear()
	drawPanels(fillInDomain(mastodon.account_verify_credentials()["acct"]), ROWS, COLS, selectedIdx)
	i=0
	for toot in tl:
		if "reblog" in toot and toot["reblog"]:
			toot=toot["reblog"]
		if "muted" in toot:
			next
		seen=(toot["id"] in seen_toots)
		if skipSeen and seen:
			next
		acct=toot["account"]
		username=fillInDomain(acct["acct"])
		cw=toot["spoiler_text"]
		if not cw:
			cw=None
		content=processContents(toot["content"])
		drawMsgPanel(i, username, cw, content, str(toot["created_at"]), seen)
		if i==selectedIdx:
			if not seen:
				seen_toots.append(toot["id"])
			if "media_attachments" in toot:
				for attachment in toot["media_attachments"]:
					content+="\n"+attachment["url"]
			flags=""
			if "in_reply_to_id" in toot and toot["in_reply_to_id"]:
				flags+="["+str(toot["in_reply_to_id"])+"<-]"
			if toot["reblogged"]:
				flags+="[b]"
			if toot["favourited"]:
				flags+="[f]"
			if toot["sensitive"]:
				flags+="[sensitive]"
			flags+="["+toot["visibility"]+"]"
			content=flags+content
			drawSelectedMsg(username, acct["display_name"], cw, content, True)
		i+=1
	scr.refresh()
def main():
	global mastodon, domain
	if not os.path.exists(ferndir):
		os.mkdir(ferndir)
		registerApplicationHelper()
	instance_url=""
	try:
			with open(ferndir+"instance_url.txt", 'r') as f:
				instance_url=f.readline().strip()
			mastodon=Mastodon(client_id=ferndir+"clientcred.txt", access_token=ferndir+"usercred.txt", api_base_url=instance_url)
	except Exception as e:
		statusMsg("Something happened: "+str(e))
		registerApplicationHelper()
		main()
	domain=re.sub("^http.?://", "", re.sub("/$", "", mastodon.instance()["uri"]))
	tl=mastodon.timeline_home(limit=(ROWS-3)/4)
	for i in range(0, (ROWS-3)/4):
		drawPanelContents(tl, i)
		time.sleep(1)
	tl=mastodon.timeline_local(limit=(ROWS-3)/4)
	for i in range(0, (ROWS-3)/4):
		drawPanelContents(tl, i)
		time.sleep(1)
try:
	setupCurses()
	main()
except:
	teardownCurses()
	traceback.print_exc()
teardownCurses()
