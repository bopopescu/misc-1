#!/usr/bin/env python

import sys, curses, time

from datetime import datetime

global scr, ROWS, COLS

ROWS=25
COLS=80

hlcolor=[curses.COLOR_MAGENTA, curses.COLOR_BLACK]
normcolor=[curses.COLOR_WHITE, curses.COLOR_BLACK]
cwcolor=[curses.COLOR_RED, curses.COLOR_BLACK]
textcolor=[curses.COLOR_WHITE, curses.COLOR_BLACK]
menucolor=[curses.COLOR_GREEN, curses.COLOR_BLACK]

hlnum=1
normnum=2
cwnum=3
textnum=4
menunum=5

def setupColor():
	curses.start_color()
	curses.init_pair(*([hlnum]+hlcolor))	 # Highlighted message frame
	curses.init_pair(*([normnum]+normcolor))	 # Normal message frame
	curses.init_pair(*([cwnum]+cwcolor))	 # CW text
	curses.init_pair(*([textnum]+textcolor))	 # Normal text
	curses.init_pair(*([menunum]+menucolor))	 # Menu

def setupCurses():
	global scr, ROWS, COLS
	scr = curses.initscr()
	setupColor()
	curses.cbreak()
	curses.noecho()
	scr.keypad(1)
	ROWS, COLS = scr.getmaxyx()
	scr.clear()
def teardownCurses():
	curses.nocbreak()
	scr.keypad(0)
	curses.echo()
	curses.endwin()

def trunc(string, length, affix="...", breakOnWord=False):
	if len(string)<length:
		return string
	if length==0:
		return ""
	if len(affix)>length:
		return string[:length]
	if breakOnWord:
		words=string.split()
		for i in range(len(words), 1, -1):
			x=" ".join(words[:i]+[affix])
			if len(x)<length:
				return x
		return trunc(string, length, affix)
	else:
		return string[:length-len(affix)]+affix

def truncWrap(string, length, affix="\n", breakOnWord=True):
	ret=[]
	while len(string)>length:
		ret.append(trunc(string, length, affix, breakOnWord))
		string=string[len(ret[-1])-(1+len(affix)):]
	return ret+[string]
def truncWrapMulti(strings, length):
	ret=[]
	for string in strings:
		ret.extend(truncWrap(string, length))
		ret.extend("")
	return ret

def centerPad(string, length, padding=" "):
	string=trunc(string, length, breakOnWord=True)
	pad=length-len(string)
	if pad>0 and (pad/2)>0 and ((pad/2)/len(padding))>0:
		padstr=padding*((pad/2)/len(padding))
		return padstr+string+padstr
	return string

def drawPanels(uid, rows, cols, highlighted=0):
	hlColor=curses.color_pair(hlnum)
	color=curses.color_pair(normnum)
	leftPanelCols=int((cols/8.0)*3)
	rightPanelCols=cols-leftPanelCols
	truncID=trunc(uid, leftPanelCols-3)
	scr.addstr("".join(["+[", truncID, "]", "-"*(leftPanelCols-(3+len(truncID))), "+", "-"*(rightPanelCols-1)]))
	for i in range(0, (rows-3)/4):
		if highlighted==i:
			scr.addstr("".join(["#", " "*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), hlColor)
			scr.addstr("".join(["#", " "*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), hlColor)
			scr.addstr("".join(["#", " "*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), hlColor)
			scr.addstr("".join(["#", "="*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), hlColor)
		else:
			scr.addstr("".join(["|", " "*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), color)
			scr.addstr("".join(["|", " "*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), color)
			scr.addstr("".join(["|", " "*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), color)
			scr.addstr("".join(["+", "-"*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), color)
	if (rows-3)%4>0:
		for i in range(4*((rows-3)/4), rows-3):
			scr.addstr(" "*cols)
	scr.addstr(centerPad("[(p)rev/(n)ext_unread] [(P)rev/(N)ext_message] [(j)ump to timeline] [(T)op] [(c)ompose] [(q)uit]", cols).replace("_", " "), curses.color_pair(menunum))
	scr.addstr(centerPad("[(b)oost] [(f)av] [(s)ettings] [(o)pen_CW] [(t)hread_view] [(F)etch_new] [(h)elp]", cols).replace("_", " "), curses.color_pair(menunum))

def drawMsgPanel(idx, user, cw, msg, date):
	panelstart=(idx*4)+1
	panelwidth=int((COLS/8.0)*3)-1
	scr.addstr(panelstart, 1, trunc(user, panelwidth), curses.color_pair(menunum))
	if cw==None:
		scr.addstr(panelstart+1, 1, trunc(msg.split("\n")[0], panelwidth), curses.color_pair(textnum))
	else:
		scr.addstr(panelstart+1, 1, trunc(cw, panelwidth), curses.color_pair(cwnum))
	scr.addstr(panelstart+2, 1, trunc(date, panelwidth), curses.color_pair(menunum))
def drawSelectedMsg(user, displayname, cw, msg, cwopen=False):
	panelstart=int((COLS/8.0)*3)+2
	panelwidth=COLS-panelstart
	msg=truncWrapMulti(msg.split("\n"), panelwidth)
	scr.addstr(1, panelstart, trunc(displayname, panelwidth), curses.color_pair(menunum))
	scr.addstr(2, panelstart, "("+trunc(user, panelwidth-2)+")", curses.color_pair(menunum))
	if cw==None:
		i=3
		for line in msg:
			if i>ROWS:
				return
			scr.addstr(i, panelstart, line, curses.color_pair(textnum))
			i+=1
	else:
		i=3
		for line in truncWrap("CW: "+cw, panelwidth):
			if i>ROWS:
				return
			scr.addstr(i, panelstart, line, curses.color_pair(cwnum))
			i+=1
		if cwopen:
			for line in msg:
				if i>ROWS:
					return
				scr.addstr(i, panelstart, line, curses.color_pair(textnum))
				i+=1

setupCurses()
drawPanels("@enkiv2@niu.moe", ROWS, COLS)
drawMsgPanel(0, "@enkiv2@niu.moe", "Stuff", "Hello, world!", str(datetime.now()))
drawSelectedMsg("@enkiv2@niu.moe", "Gothic Planchette Egregore", "Stuff", "Hello, world!\nThis is a very long line aaaaaaaaaaaaaaaaaaaaaaaahaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.\nthis is another foo bar baz foo bar baz foo bar baz foo bar baz foo bar baz foo bar baz foo bar baz foo bar baz foo bar baz foo bar baz foo bar baz foo bar baz foo bar baz quux.\nThisshouldcauseacharacterbreakaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabouthere.", True)
scr.refresh()
time.sleep(3)
teardownCurses()
